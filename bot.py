import os
import json
import logging
import asyncio
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.events import NewMessage
from telethon.tl.types import PeerChannel, PeerChat
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ConversationHandler, MessageHandler,
    filters, ContextTypes
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE_API_ID, STATE_API_HASH, STATE_PHONE, STATE_CODE, STATE_PASSWORD, STATE_ADD_USER, STATE_REMOVE_USER = range(7)

CONFIG_FILE = "config.json"
TRACKED_USERS_FILE = "tracked_users.json"
load_dotenv()

def load_config():
    logger.debug("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ %s", CONFIG_FILE)
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
                logger.debug("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: %s", config)
                return config
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", e)
    return {}

def save_config(config):
    logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", config)
    try:
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ %s", CONFIG_FILE)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", e)

def load_tracked_users():
    logger.debug("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ %s", TRACKED_USERS_FILE)
    if os.path.exists(TRACKED_USERS_FILE):
        try:
            with open(TRACKED_USERS_FILE, 'r') as f:
                users = json.load(f)
                logger.debug("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: %s", users)
                return users
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %s", e)
    return []

def save_tracked_users(users):
    logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %s", users)
    try:
        with open(TRACKED_USERS_FILE, 'w') as f:
            json.dump(users, f, indent=4)
        logger.info("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ %s", TRACKED_USERS_FILE)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %s", e)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s –≤ —á–∞—Ç–µ %s", update.message.from_user.id, update.message.chat_id)
    config = load_config()
    if not all(key in config for key in ["API_ID", "API_HASH", "SESSION_STRING", "ADMIN_ID"]):
        await update.message.reply_text("–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return ConversationHandler.END
    welcome_message = """
    üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üåü

    –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /setup - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞
    /adduser - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    /removeuser - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    /chats - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
    /testmention - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    /reset - –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.
    """
    await update.message.reply_text(welcome_message)
    return ConversationHandler.END

async def setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /setup –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s –≤ —á–∞—Ç–µ %s", update.message.from_user.id, update.message.chat_id)
    config = load_config()
    if all(key in config for key in ["API_ID", "API_HASH", "SESSION_STRING", "ADMIN_ID"]):
        await update.message.reply_text("–ë–æ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–ª—è –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –∏ –∑–∞—Ç–µ–º /setup.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ API_ID:")
    return STATE_API_ID

async def get_api_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    logger.debug("–ü–æ–ª—É—á–µ–Ω API_ID: %s", user_input)
    if not user_input.isdigit():
        await update.message.reply_text("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return STATE_API_ID
    context.user_data['api_id'] = user_input
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ API_HASH:")
    return STATE_API_HASH

async def get_api_hash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['api_hash'] = update.message.text
    logger.debug("–ü–æ–ª—É—á–µ–Ω API_HASH")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890):")
    return STATE_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    context.user_data['phone'] = phone
    logger.debug("–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s", phone)
    api_id = int(context.user_data['api_id'])
    api_hash = context.user_data['api_hash']
    client = TelegramClient(StringSession(), api_id, api_hash)
    try:
        await client.connect()
        sent_code = await client.send_code_request(phone)
        context.user_data['client'] = client
        context.user_data['phone_code_hash'] = sent_code.phone_code_hash
        logger.info("–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä %s", phone)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:")
        return STATE_CODE
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /setup.")
        await client.disconnect()
        return ConversationHandler.END

async def get_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['code'] = update.message.text.strip()
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    await update.message.reply_text("–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ 2FA, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':")
    return STATE_PASSWORD

async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text if update.message.text.lower() != '–Ω–µ—Ç' else None
    logger.debug("–ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å: %s", "–∑–∞–¥–∞–Ω" if password else "–Ω–µ –∑–∞–¥–∞–Ω")
    api_id = int(context.user_data['api_id'])
    api_hash = context.user_data['api_hash']
    phone = context.user_data['phone']
    code = context.user_data['code']
    phone_code_hash = context.user_data['phone_code_hash']
    client: TelegramClient = context.user_data['client']

    try:
        await client.sign_in(phone=phone, code=code, phone_code_hash=phone_code_hash, password=password)
        session_string = client.session.save()
        config = load_config()
        config.update({
            "API_ID": context.user_data['api_id'],
            "API_HASH": context.user_data['api_hash'],
            "SESSION_STRING": session_string,
            "ADMIN_ID": str(update.message.from_user.id)
        })
        save_config(config)
        logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return ConversationHandler.END
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %s", e)
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /setup.")
        await client.disconnect()
        return ConversationHandler.END
    finally:
        await client.disconnect()

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /reset –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s –≤ —á–∞—Ç–µ %s", update.message.from_user.id, update.message.chat_id)
    if 'client' in context.user_data:
        await context.user_data['client'].disconnect()
    context.user_data.clear()
    await update.message.reply_text("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /setup –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    return ConversationHandler.END

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /ping –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s –≤ —á–∞—Ç–µ %s", update.message.from_user.id, update.message.chat_id)
    await update.message.reply_text("Pong! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω.")
    return ConversationHandler.END

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /adduser –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s –≤ —á–∞—Ç–µ %s", update.message.from_user.id, update.message.chat_id)
    config = load_config()
    if str(update.message.from_user.id) != config.get("ADMIN_ID"):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Å @):")
    return STATE_ADD_USER

async def get_user_to_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip()
    if not username.startswith('@'):
        username = f"@{username}"
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", username)
    tracked_users = load_tracked_users()
    if username not in tracked_users:
        tracked_users.append(username)
        save_tracked_users(tracked_users)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    else:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    return ConversationHandler.END

async def remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /removeuser –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s –≤ —á–∞—Ç–µ %s", update.message.from_user.id, update.message.chat_id)
    config = load_config()
    if str(update.message.from_user.id) != config.get("ADMIN_ID"):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å @):")
    return STATE_REMOVE_USER

async def get_user_to_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip()
    if not username.startswith('@'):
        username = f"@{username}"
    logger.debug("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", username)
    tracked_users = load_tracked_users()
    if username in tracked_users:
        tracked_users.remove(username)
        save_tracked_users(tracked_users)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    else:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    return ConversationHandler.END

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /status –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s –≤ —á–∞—Ç–µ %s", update.message.from_user.id, update.message.chat_id)
    config = load_config()
    tracked_users = load_tracked_users()
    status_text = "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
    status_text += f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–ü–æ–ª–Ω–∞—è' if all(key in config for key in ['API_ID', 'API_HASH', 'SESSION_STRING', 'ADMIN_ID']) else '–ù–µ–ø–æ–ª–Ω–∞—è'}\n"
    status_text += f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {', '.join(tracked_users) if tracked_users else '–ù–µ—Ç'}\n"
    status_text += "–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —á–∞—Ç—ã —á–µ—Ä–µ–∑ Telethon –∫–ª–∏–µ–Ω—Ç.\n"
    try:
        chat_member = await context.bot.get_chat_member(update.message.chat_id, context.bot.id)
        status_text += f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ: {chat_member.status}\n"
        if chat_member.status not in ['administrator', 'member']:
            status_text += "–í–Ω–∏–º–∞–Ω–∏–µ: –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ!\n"
    except Exception as e:
        status_text += f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}\n"
    await update.message.reply_text(status_text)

async def list_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /chats –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s –≤ —á–∞—Ç–µ %s", update.message.from_user.id, update.message.chat_id)
    config = load_config()
    if not all(key in config for key in ["API_ID", "API_HASH", "SESSION_STRING"]):
        await update.message.reply_text("Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup.")
        return
    if str(update.message.from_user.id) != config.get("ADMIN_ID"):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —á–∞—Ç—ã.")
        return
    api_id = int(config["API_ID"])
    api_hash = config["API_HASH"]
    session_string = config["SESSION_STRING"]
    try:
        client = TelegramClient(StringSession(session_string), api_id, api_hash)
        await client.connect()
        if not await client.is_user_authorized():
            await update.message.reply_text("–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /setup –∑–∞–Ω–æ–≤–æ.")
            return

        chats = []
        async for dialog in client.iter_dialogs():
            if isinstance(dialog.entity, (PeerChannel, PeerChat)):  # –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
                chats.append(f"{dialog.name} (ID: {dialog.id})")

        if not chats:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∏—Ö —á–µ—Ä–µ–∑ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        message = "–ß–∞—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ Telethon –∫–ª–∏–µ–Ω—Ç—É:\n"
        messages = []
        for chat in chats:
            if len(message) + len(chat) + 1 > 4000:
                messages.append(message)
                message = "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n"
            message += chat + "\n"
        if message:
            messages.append(message)
        for msg in messages:
            await update.message.reply_text(msg)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: %s", e)
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await client.disconnect()

async def test_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /testmention –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s –≤ —á–∞—Ç–µ %s", update.message.from_user.id, update.message.chat_id)
    config = load_config()
    if str(update.message.from_user.id) != config.get("ADMIN_ID"):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return
    tracked_users = load_tracked_users()
    if not tracked_users:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ /adduser.")
        return
    try:
        await context.bot.send_message(
            chat_id=config["ADMIN_ID"],
            text=f"–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tracked_users[0]} —É–ø–æ–º—è–Ω—É—Ç (—Ç–µ—Å—Ç)."
        )
        await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º.")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

async def handle_new_message(event, bot, admin_id):
    logger.debug("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ %s: %s", event.chat_id, event.raw_text)
    tracked_users = load_tracked_users()
    message_text = event.raw_text.lower() if event.raw_text else ""

    for user in tracked_users:
        if user.lower() in message_text:
            try:
                chat = await event.get_chat()
                chat_name = getattr(chat, 'title', '–õ–∏—á–Ω—ã–π —á–∞—Ç')
                message_link = f"https://t.me/c/{str(chat.id).replace('-100', '')}/{event.message.id}"
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–ø–æ–º—è–Ω—É—Ç –≤ —á–∞—Ç–µ '{chat_name}': {message_link}"
                )
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É %s –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ %s –≤ —á–∞—Ç–µ %s (%s)", admin_id, user, chat.id, chat_name)
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    config = load_config()
    bot_token = config.get("BOT_TOKEN") or os.getenv("BOT_TOKEN")
    api_id = config.get("API_ID")
    api_hash = config.get("API_HASH")
    session_string = config.get("SESSION_STRING")
    admin_id = config.get("ADMIN_ID")

    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ config.json –∏–ª–∏ .env. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
        return

    application = None
    client = None
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application —Å BOT_TOKEN")
        application = Application.builder().token(bot_token).build()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("setup", setup),
                CommandHandler("adduser", add_user),
                CommandHandler("removeuser", remove_user),
            ],
            states={
                STATE_API_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_api_id)],
                STATE_API_HASH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_api_hash)],
                STATE_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
                STATE_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_code)],
                STATE_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
                STATE_ADD_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_to_add)],
                STATE_REMOVE_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_to_remove)],
            },
            fallbacks=[
                CommandHandler("reset", reset),
            ],
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("ping", ping))
        application.add_handler(CommandHandler("status", status))
        application.add_handler(CommandHandler("chats", list_chats))
        application.add_handler(CommandHandler("testmention", test_mention))
        application.add_handler(conv_handler)

        logger.info("–ó–∞–ø—É—Å–∫ polling")
        await application.initialize()
        await application.start()
        await application.updater.start_polling(drop_pending_updates=True)
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã")

        # –ó–∞–ø—É—Å–∫ Telethon –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–∞—è
        if all([api_id, api_hash, session_string, admin_id]):
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞")
            client = TelegramClient(StringSession(session_string), int(api_id), api_hash)

            @client.on(NewMessage(chats=None))  # –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
            async def handler(event):
                await handle_new_message(event, application.bot, admin_id)

            async with client:
                await client.start()
                logger.info("Telethon –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
                while application.updater.running:
                    await asyncio.sleep(1)
        else:
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–ª–Ω–∞—è, –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ /setup")
            while application.updater.running:
                await asyncio.sleep(1)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: %s", e)
        if admin_id and application:
            await application.bot.send_message(
                chat_id=admin_id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}"
            )
    finally:
        if application and application.updater.running:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Application")
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
            logger.info("Application –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if client:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telethon –∫–ª–∏–µ–Ω—Ç–∞")
            await client.disconnect()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
